package reduction;

import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

import org.jgrapht.GraphPath;
import org.jgrapht.graph.DirectedPseudograph;

import monkey.event.Event;
import reduction.ttg.TTGEdge;
import reduction.ttg.TTGNode;
import reduction.ttg.node.ErrorState;
import reduction.ttg.node.NormalState;

/**
 * This class collects events on the path generated by PathFinder according to some strategy.
 * 
 * @see reduction.PathFinder
 * @author yifei
 */
public interface EventCollector {
	public abstract List<Event> collectEventsOnPath(DirectedPseudograph<TTGNode, TTGEdge> ttg, GraphPath<TTGNode, TTGEdge> path);

	// This method checks the event sequences of given TTG.
	public static void eventChecker(DirectedPseudograph<TTGNode, TTGEdge> ttg) {
		List<TTGNode> nodes = new ArrayList<>(ttg.vertexSet());
		nodes.sort((n1, n2) -> Integer.compare(n1.getID(), n2.getID()));
		for(TTGNode node : nodes) {
			if(node instanceof ErrorState)
				System.out.println(node);
			else {
				NormalState normalState = (NormalState) node;
				System.out.println("# Node ID: " + normalState.getID());
				System.out.println("# Event sequence: " + normalState.getEventSeqs().size());
				for(Deque<Event> eventSeq : normalState.getEventSeqs()) {
					if(eventSeq.isEmpty())
						System.out.println("  " + eventSeq);
					else {
						System.out.println("  From " + eventSeq.peekFirst().getID() + " to " + eventSeq.peekLast().getID());
					}
				}
			}
			System.out.println();
		}
	}
}
